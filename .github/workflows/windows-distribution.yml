name: Distribute Windows artifact

on:
  # Reusable workflows (other workflows can trigger this)
  workflow_call:
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Saves up some space
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode Local properties
        run: |
          echo "${{ secrets.LOCAL_PROPERTIES }}" > local.properties.b64
          certutil -decode local.properties.b64 ${{ github.workspace }}\local.properties
          (Get-Content ${{ github.workspace }}\local.properties) -replace 'storeFile=.*', 'storeFile=${{ github.workspace }}\keystore.jks' | Set-Content ${{ github.workspace }}\local.properties

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" > keystore.jks.b64
          certutil -decode keystore.jks.b64 ${{ github.workspace }}\keystore.jks

      - name: Decode google-services.json
        run: |
          echo "${{ secrets.GOOGLE_SERVICES }}" > google-services.json.b64
          certutil -decode google-services.json.b64 ${{ github.workspace }}\composeApp\google-services.json

      - name: Decode chat-enrichment.json
        run: |
          echo "${{ secrets.GCS }}" > chat-enrichment-fbc09765a643.json.b64
          certutil -decode chat-enrichment-fbc09765a643.json.b64 ${{ github.workspace }}\composeApp\chat-enrichment-fbc09765a643.json

      - name: Decode Microsoft PFX certificate
        run: |
          echo "${{ secrets.WINDOWS_PFX_BASE64 }}" > augmy.pfx.b64
          certutil -decode augmy.pfx.b64 ${{ github.workspace }}\augmy.pfx

      # Prepare the environment
      - name: Build with Gradle and Print Version
        id: gradle
        shell: pwsh
        run: |
          $version = (& ./gradlew -q printVersionName).Trim()
          $version = $version -replace "`r", ""
          $version = $version -replace "`n", ""
          echo "VERSION=$version" >> $env:GITHUB_ENV

      # Locate signtool.exe and log the output
      - name: Locate signtool.exe
        id: locate_signtool
        run: |
          $signtoolPath = (Get-Command signtool.exe -ErrorAction SilentlyContinue).Source
          if (-not $signtoolPath) {
            $signtoolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue | Where-Object { $_.FullName -notmatch "arm" } | Select-Object -ExpandProperty FullName -First 1
          }
          if (-not $signtoolPath) {
            $signtoolPath = Get-ChildItem -Path "C:\Program Files\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue | Where-Object { $_.FullName -notmatch "arm" } | Select-Object -ExpandProperty FullName -First 1
          }
          if (-not $signtoolPath) {
            Write-Error "signtool.exe not found"
            exit 1
          }
          echo "signtool.exe path: $signtoolPath"
          echo "SIGNSIGNTOOL_PATH=$signtoolPath" >> $env:GITHUB_ENV
        shell: pwsh

      # Windows - Msi
      - name: Build Windows Release
        run: .\gradlew packageReleaseMsi -Pbuildkonfig.flavor=release

      - name: Move and rename MSI file
        shell: pwsh
        run: |
          $msiFile = Get-ChildItem -Path "${{ github.workspace }}\composeApp\build\compose\binaries" -Filter "*.msi" -Recurse | Select-Object -First 1
          if (-not $msiFile) {
            Write-Error "No MSI file found"
            exit 1
          }
          Move-Item $msiFile.FullName "${{ github.workspace }}\Augmy.msi" -Force

      # Currently disabled, as there is no recognized PFX certificate available - requires a purchase
      # Sign the MSI file with the PFX certificate
#      - name: Sign MSI with pfx
#        run: |
#          & "${{ env.SIGNSIGNTOOL_PATH }}" sign /f "${{ github.workspace }}\augmy.pfx" /p ${{ secrets.WINDOWS_PFX_PASSWORD }} /fd sha256 /tr http://timestamp.digicert.com /td sha256 "${{ github.workspace }}\Augmy.msi"
#        env:
#          PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
#        shell: pwsh

      - name: Define FTP base options
        shell: pwsh
        run: |
          echo "FTP_OPTS=--ftp-pasv --connect-timeout 30 --max-time 3600 --retry 5 --retry-delay 25 --fail" >> $env:GITHUB_ENV

      - name: Generate versioned folder in FTP
        run: |
          curl ${{ env.FTP_OPTS }} ftp://${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}@${{ secrets.FTP_SERVER_DOMAIN }}/www/downloads/${{ env.VERSION }}/ --ftp-create-dirs

      - name: Upload versioned MSI file to FTP
        run: |
          curl ${{ env.FTP_OPTS }} --continue-at - -T ${{ github.workspace }}/Augmy.msi ftp://${{ secrets.FTP_SERVER_DOMAIN }}/www/downloads/${{ env.VERSION }}/ --user ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}

      - name: Upload general MSI file to FTP
        run: |
          curl ${{ env.FTP_OPTS }} --max-time 1800 --continue-at - -T ${{ github.workspace }}/Augmy.msi ftp://${{ secrets.FTP_SERVER_DOMAIN }}/www/downloads/ --user ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}
