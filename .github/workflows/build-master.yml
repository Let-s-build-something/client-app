name: Build and extract Release

on:
  push:
    branches: [ "release" ]

jobs:
  compile:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Print the commit message for debugging
      - name: Print commit message
        run: echo "Commit message is ${{ github.event.head_commit.message }}"

      # Saves up some space
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-encryption-key: ${{ secrets.GRADLE_CACHE_ENCRYPTION_KEY }}

      # Prepare access to everything
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Decode Local properties
        run: |
          echo "${{ secrets.LOCAL_PROPERTIES }}" | base64 --decode > ${{ github.workspace }}/local.properties
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode > /Users/runner/work/keystore.jks
      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES }}" | base64 --decode > ${{ github.workspace }}/composeApp/google-services.json

      - name: Build with Gradle and get VERSION (no pipes)
        id: gradle-version
        shell: bash
        run: |
          set -euo pipefail
          VERSION="$(./gradlew -q :composeApp:printVersionName)"   # change :app: if your task lives elsewhere
          VERSION="${VERSION//$'\r'/}"   # remove CR
          VERSION="${VERSION//$'\n'/}"   # remove LF
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Computed VERSION: $VERSION"

      - name: Create releases/<version> branch if it doesn't exist
        shell: bash
        run: |
          git fetch origin
          if ! git rev-parse --verify origin/releases/${{ steps.gradle-version.outputs.version }} >/dev/null 2>&1; then
            git checkout -b releases/${{ steps.gradle-version.outputs.version }}
            git push origin releases/${{ steps.gradle-version.outputs.version }}
          fi

      - name: Force release-version to match master
        run: |
          git fetch origin
          git checkout releases/${{ env.VERSION }}
          git reset --hard origin/master
          git push --force origin releases/${{ env.VERSION }}

  deploy-windows:
    uses: ./.github/workflows/windows-distribution.yml
    needs: compile
    secrets: inherit

  deploy-linux:
    uses: ./.github/workflows/linux-distribution.yml
    needs: compile
    secrets: inherit

  deploy-android:
    uses: ./.github/workflows/android-distribution.yml
    needs: compile
    secrets: inherit

  deploy-ios:
    uses: ./.github/workflows/ios-distribution.yml
    needs: compile
    secrets: inherit