name: Distribute iOS artifact

on:
  # Reusable workflows (other workflows can trigger this)
  workflow_call:
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: macos-14

    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.ACTION_DEPLOY_KEY }}

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup specifically XCode 15.3
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3'

      # Prepare access to everything
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Decode Local properties and add bearerToken
        run: |
          echo "${{ secrets.LOCAL_PROPERTIES }}" | base64 --decode > ${{ github.workspace }}/local.properties
          echo "bearerToken=${{ secrets.BEARER_TOKEN }}" >> ${{ github.workspace }}/local.properties
      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE }}" | base64 --decode > /Users/runner/work/keystore.jks
      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES }}" | base64 --decode > ${{ github.workspace }}/composeApp/google-services.json


      - name: Simulate Sync with Gradle files
        run: |
          ./gradlew -q syncWithGradleFiles

      - name: Install the Apple certificate and provisioning profile
        env:
            BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
            P12_PASSWORD: ${{ secrets.XCODE_BUILD_P12_PASSWORD }}
            BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
            KEYCHAIN_PASSWORD: ${{ secrets.XCODE_BUILD_KEYCHAIN_PASSWORD }}
        run: |
            cd iosApp
            pod install
          
            # create variables
            CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
            PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
            
            # import certificate and provisioning profile from secrets
            echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
            echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
            
            # create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            
            # import certificate to keychain
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH
            
            # apply provisioning profile
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: build archive
        run: |
          cd iosApp
          
          # Log provisioning profiles
          security find-identity -v -p codesigning
          ls ~/Library/MobileDevice/Provisioning\ Profiles
            
          xcodebuild -scheme "iosApp" \
          -workspace "iosApp.xcworkspace" \
          -archivePath $RUNNER_TEMP/augmy.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          -destination generic/platform=iOS \
          clean archive

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          cd iosApp
          pod install
          ls Pods
          
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild
            -exportArchive \
            -scheme "iosApp" \
            -workspace "iosApp.xcworkspace" \
            -archivePath $RUNNER_TEMP/augmy.xcarchive \
            -exportOptionsPlist $EXPORT_OPTS_PATH \
            -exportPath $RUNNER_TEMP/build \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/augmy.ipa
          retention-days: 3