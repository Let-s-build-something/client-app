package data.io.user

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.PrimaryKey
import database.AppRoomDatabase
import dev.gitlive.firebase.Firebase
import dev.gitlive.firebase.auth.auth
import kotlinx.serialization.Serializable
import kotlin.uuid.ExperimentalUuidApi
import kotlin.uuid.Uuid

/** user object of another use specific to our database */
@Serializable
@Entity(tableName = AppRoomDatabase.ROOM_NETWORK_ITEM_TABLE)
data class NetworkItemIO @OptIn(ExperimentalUuidApi::class) constructor(
    /** username of the current user */
    val name: String? = null,

    /** tag of the current user, unique in combination with [name]  */
    val tag: String? = null,

    /** Public identification of this entity */
    @PrimaryKey
    @ColumnInfo("public_id")
    val publicId: String = Uuid.random().toString(),

    /** current user's public id, generated by our BE - not associated with Firebase */
    val userPublicId: String? = null,

    /** Identifier of the related conversation */
    val conversationId: String? = null,

    /** url of a photo of this object */
    val photoUrl: String? = null,

    /** Whether the user is a mutually included */
    val isMutual: Boolean? = null,

    /**
     * A decimal range between -1 and 10. -1 means blocked, 1 is muted,
     *  or just a far social circle, and 10 is the closest
     */
    val proximity: Float? = null,

    /** Override color for this network item */
    val color: String? = null,

    /** Last mutual message with this individual */
    val lastMessage: String? = null,

    /** Database flag: an identifier of the owner of this item */
    @ColumnInfo("owner_public_id")
    var ownerPublicId: String? = Firebase.auth.currentUser?.uid
)
