package data.io.user

import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.Ignore
import androidx.room.PrimaryKey
import data.io.social.network.conversation.message.MediaIO
import data.io.user.UserIO.Companion.generateUserTag
import database.AppRoomDatabase
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import net.folivo.trixnity.core.model.UserId
import net.folivo.trixnity.core.model.events.m.PresenceEventContent
import kotlin.uuid.ExperimentalUuidApi
import kotlin.uuid.Uuid

/** user object of another use specific to our database */
@Serializable
@Entity(tableName = AppRoomDatabase.TABLE_NETWORK_ITEM)
data class NetworkItemIO @OptIn(ExperimentalUuidApi::class) constructor(
    /** username of the current user */
    @ColumnInfo("display_name")
    @SerialName("display_name")
    val displayName: String? = null,

    /** Public identification of this entity */
    @ColumnInfo("public_id")
    val publicId: String = Uuid.random().toString(),

    /** current user's public id, generated by our BE - not associated with Firebase */
    @ColumnInfo("user_public_id")
    val userPublicId: String? = null,

    @SerialName("user_id")
    @ColumnInfo("user_id")
    val userId: String? = null,

    @ColumnInfo("photo_media")
    val avatar: MediaIO? = null,

    @SerialName("avatar_url")
    @ColumnInfo("avatar_url")
    val avatarUrl: String? = null,

    /** Whether the user is a mutually included */
    @ColumnInfo("is_mutual")
    val isMutual: Boolean? = null,

    /** Last message sent within this network item */
    @Deprecated("Only rooms can have messages")
    @ColumnInfo("last_message")
    val lastMessage: String? = null,

    /** Whether the user's configuration is public */
    @ColumnInfo("is_public")
    val isPublic: Boolean? = null,

    /**
     * A decimal range between -1 and 10. -1 means blocked, 1 is muted,
     *  or just a far social circle, and 10 is the closest
     */
    val proximity: Float? = null,

    /** Override color for this network item */
    val color: String? = null,

    /** Database flag: an identifier of the owner of this item */
    @ColumnInfo("owner_user_id")
    var ownerUserId: String? = null,

    val presence: PresenceEventContent? = null,

    @PrimaryKey
    @ColumnInfo("primary_key")
    val primaryKey: String = "${publicId}_$ownerUserId"
) {

    val tag: String?
        @Ignore
        get() = UserId(userId ?: publicId).generateUserTag()
}
